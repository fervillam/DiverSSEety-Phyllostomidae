
################################################################################
########### Phyllostomidae State-Dependent Diversification Analysis ############
############### Part 3: State-Dependent Diversification Analysis ###############
################################################################################

NUM_STATES = 2
DATASET = "diet"

# Reading the tree

Phyllostomidae_Tree = eeadTrees("Phyllostomidae/MorPhyTree.tree")

# Reading the Bin_2 codification matrix

Bin_2_data <- readCharacterData("Phyllostomidae/Bin_2.nex")

moves = VectorMoves()
monitors = VectorMonitors()

H = 0.587405

#### Creating the rates ####

# Specifying a prior for both diversification and turnover rates

for (i in 1:NUM_STATES) {
  
  ### Create a loguniform distributed variable for the diversification rate
  speciation[i] ~ dnLoguniform( 1E-6, 1E2)
  speciation[i].setValue( ln(367.0/2.0) / Phylostomidae_Tree.rootAge() )
  moves.append( mvScale(speciation[i],lambda=0.20,tune=true,weight=3.0) )
  
  ### Create a loguniform distributed variable for the turnover rate
  extinction[i] ~ dnLoguniform( 1E-6, 1E2)
  extinction[i].setValue( speciation[i]/10.0 )
  moves.append( mvScale(extinction[i],lambda=0.20,tune=true,weight=3.0) )
  
  diversification[i] := speciation[i] - extinction[i]
  
}


#########################################################
# Set up the transition rate matrix for observed states #
#########################################################

# Each transition rate between observed states are drawn
# from an exponential distribution with a mean of 10
# character state transitions over the tree.
rate_pr := Phylostomidae_Tree.treeLength() / 10
for ( i in 1:(NUM_STATES*(NUM_STATES-1)) ) {
  transition_rates[i] ~ dnExp(rate_pr)
  moves.append( mvScale(transition_rates[i],lambda=0.20,tune=true,weight=3.0) )
}

rate_matrix := fnFreeBinary( transition_rates, rescaled=false)


### Create a constant variable with the prior probabilities of each rate category at the root.
rate_category_prior ~ dnDirichlet( rep(1,NUM_STATES) )
moves.append( mvDirichletSimplex(rate_category_prior,tune=true,weight=2) )


### Create the fix parameter for the age of the root set to the observed age
root <- Phylostomidae_Tree.rootAge()


### rho is the probability of sampling species at the present
### fix this to 112/Total of Phyllostomidae species
rho <- Phylostomidae_Tree.ntips()/150


#### construct a variable for the tree drawn from a birth death process
timetree ~ dnCDBDP( rootAge           = root,
                    speciationRates   = speciation,
                    extinctionRates   = extinction,
                    Q                 = rate_matrix,
                    pi                = rate_category_prior,
                    delta             = 1.0,
                    rho               = rho,
                    condition         = "time")

### clamp the model with the "observed" tree
timetree.clamp( Phylostomidae_Tree )
timetree.clampCharData( Bin_2_data )



#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(rate_matrix)

### set up the monitors that will output parameter values to file and screen
monitors.append( mnModel(filename=Documents/Phyllostomidae-Anc-Reconstruction/Bin_2.log", printgen=1) )
monitors.append( mnJointConditionalAncestralState(tree=timetree, cdbdp=timetree, type="Standard", printgen=1, withTips=true, withStartStates=false, filename=Documents/Phyllostomidae-Anc-Reconstruction/Bin_2_anc_states.log") )
monitors.append( mnStochasticCharacterMap(cdbdp=timetree, filename=Documents/Phyllostomidae-Anc-Reconstruction/Bin_2_stoch_map.log", printgen=1) )
monitors.append( mnScreen(printgen=10, speciation, extinction) )


################
# The Analysis #
################

### workspace mcmc
mymcmc = mcmc(mymodel, monitors, moves, nruns=2, moveschedule="random", combine="mixed")

### run the MCMC
mymcmc.run(generations=10000, tuningInterval=200)



##############################
# Summarize ancestral states #
##############################


anc_states = readAncestralStateTrace(Documents/Phyllostomidae-Anc-Reconstruction/Bin_2_anc_states.log")
anc_tree = ancestralStateTree(tree=Phylostomidae_Tree,
                              ancestral_state_trace_vector=anc_states,
                              include_start_states=false,
                              file=Documents/Phyllostomidae-Anc-Reconstruction/Bin_2_anc_states_results.tree",
                              burnin=0.1,
                              summary_statistic="MAP",
                              site=1)


anc_state_trace = readAncestralStateTrace(Documents/Phyllostomidae-Anc-Reconstruction/Bin_2_stoch_map.log")
characterMapTree(Phylostomidae_Tree,
                 anc_state_trace,
                 character_file=Documents/Phyllostomidae-Anc-Reconstruction/Bin_2_stoch_map_character.tree",
                 posterior_file=Documents/Phyllostomidae-Anc-Reconstruction/Bin_2_stoch_map_posterior.tree",
                 burnin=0.1,
                 reconstruction="marginal")

q()
